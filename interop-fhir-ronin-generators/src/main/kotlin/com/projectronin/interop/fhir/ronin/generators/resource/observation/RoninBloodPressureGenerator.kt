package com.projectronin.interop.fhir.ronin.generators.resource.observation

import com.projectronin.interop.fhir.generators.datatypes.codeableConcept
import com.projectronin.interop.fhir.generators.datatypes.coding
import com.projectronin.interop.fhir.generators.primitives.of
import com.projectronin.interop.fhir.generators.resources.ObservationGenerator
import com.projectronin.interop.fhir.r4.CodeSystem
import com.projectronin.interop.fhir.r4.datatype.CodeableConcept
import com.projectronin.interop.fhir.r4.datatype.Coding
import com.projectronin.interop.fhir.r4.datatype.DynamicValue
import com.projectronin.interop.fhir.r4.datatype.DynamicValueType
import com.projectronin.interop.fhir.r4.datatype.Quantity
import com.projectronin.interop.fhir.r4.datatype.primitive.Code
import com.projectronin.interop.fhir.r4.datatype.primitive.Decimal
import com.projectronin.interop.fhir.r4.datatype.primitive.asFHIR
import com.projectronin.interop.fhir.r4.resource.Observation
import com.projectronin.interop.fhir.r4.resource.ObservationComponent
import com.projectronin.interop.fhir.r4.resource.Patient
import com.projectronin.interop.fhir.ronin.generators.resource.referenceData
import com.projectronin.interop.fhir.ronin.generators.util.generateCodeableConcept
import com.projectronin.interop.fhir.ronin.generators.util.generateReference
import com.projectronin.interop.fhir.ronin.generators.util.generateWithDefault
import com.projectronin.interop.fhir.ronin.generators.util.rcdmMeta
import com.projectronin.interop.rcdm.common.enums.RoninProfile
import com.projectronin.interop.rcdm.common.metadata.ValueSetMetadata
import com.projectronin.interop.rcdm.registry.model.ValueSetList
import java.math.BigDecimal

/**
 * Helps generate ronin blood pressure observation profile, applies meta and randomly generates an
 * acceptable code from the [possibleBloodPressureCodes] list, category is generated by base-vital-signs
 */
fun rcdmObservationBloodPressure(
    tenant: String,
    block: ObservationGenerator.() -> Unit,
): Observation {
    return rcdmBaseObservation(tenant) {
        block.invoke(this)
        meta of rcdmMeta(RoninProfile.OBSERVATION_BLOOD_PRESSURE, tenant) {}
        category of listOf(codeableConcept { coding of vitalSignsCategory })
        code of generateCodeableConcept(code.generate(), possibleBloodPressureCodes.codes.random())
        subject of generateReference(subject.generate(), subjectReferenceOptions, tenant, "Patient")
        component of generateWithDefault(component, bloodPressureComponent)
    }
}

fun Patient.rcdmObservationBloodPressure(block: ObservationGenerator.() -> Unit): Observation {
    val data = this.referenceData()
    return rcdmObservationBloodPressure(data.tenantId) {
        block.invoke(this)
        subject of
            generateReference(
                subject.generate(),
                subjectReferenceOptions,
                data.tenantId,
                "Patient",
                data.udpId,
            )
    }
}

val possibleBloodPressureCodesList =
    listOf(
        Pair("35094-2", "Blood pressure panel"),
        Pair("55417-0", "Short blood pressure panel"),
        Pair("85354-9", "Blood pressure panel with all children optional"),
        Pair("34553-8", "Orthostatic blood pressure panel"),
    ).map {
        coding {
            system of loinc
            version of "2.74"
            code of it.first
            display of it.second
        }
    }

val possibleBloodPressureCodes =
    ValueSetList(
        possibleBloodPressureCodesList,
        ValueSetMetadata(
            registryEntryType = "value_set",
            valueSetName = "bloodpressurepanel",
            valueSetUuid = "64baa785-ba8a-448f-8714-93d57fd64db5",
            version = "1",
        ),
    )
val mmhg = "mm[Hg]"
val bloodPressureComponent =
    listOf(
        ObservationComponent(
            code =
                CodeableConcept(
                    coding = listOf(Coding(system = CodeSystem.LOINC.uri, code = Code("8462-4"))),
                    text = "Diastolic".asFHIR(),
                ),
            value =
                DynamicValue(
                    DynamicValueType.QUANTITY,
                    Quantity(
                        value = Decimal(value = BigDecimal.valueOf(70.0)),
                        unit = mmhg.asFHIR(),
                        system = CodeSystem.UCUM.uri,
                        code = Code(mmhg),
                    ),
                ),
        ),
        ObservationComponent(
            code =
                CodeableConcept(
                    coding = listOf(Coding(system = CodeSystem.LOINC.uri, code = Code("8480-6"))),
                    text = "Systolic".asFHIR(),
                ),
            value =
                DynamicValue(
                    DynamicValueType.QUANTITY,
                    Quantity(
                        value = Decimal(value = BigDecimal.valueOf(70.0)),
                        unit = mmhg.asFHIR(),
                        system = CodeSystem.UCUM.uri,
                        code = Code(mmhg),
                    ),
                ),
        ),
    )
