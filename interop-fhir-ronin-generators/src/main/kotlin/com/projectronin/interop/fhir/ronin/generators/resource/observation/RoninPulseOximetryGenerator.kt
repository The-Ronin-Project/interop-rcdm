package com.projectronin.interop.fhir.ronin.generators.resource.observation

import com.projectronin.interop.fhir.generators.datatypes.codeableConcept
import com.projectronin.interop.fhir.generators.datatypes.coding
import com.projectronin.interop.fhir.generators.primitives.of
import com.projectronin.interop.fhir.generators.resources.ObservationGenerator
import com.projectronin.interop.fhir.r4.CodeSystem
import com.projectronin.interop.fhir.r4.datatype.CodeableConcept
import com.projectronin.interop.fhir.r4.datatype.Coding
import com.projectronin.interop.fhir.r4.datatype.DynamicValue
import com.projectronin.interop.fhir.r4.datatype.DynamicValueType
import com.projectronin.interop.fhir.r4.datatype.Quantity
import com.projectronin.interop.fhir.r4.datatype.primitive.Code
import com.projectronin.interop.fhir.r4.datatype.primitive.Decimal
import com.projectronin.interop.fhir.r4.datatype.primitive.asFHIR
import com.projectronin.interop.fhir.r4.resource.Observation
import com.projectronin.interop.fhir.r4.resource.ObservationComponent
import com.projectronin.interop.fhir.r4.resource.Patient
import com.projectronin.interop.fhir.ronin.generators.resource.referenceData
import com.projectronin.interop.fhir.ronin.generators.util.generateCodeableConcept
import com.projectronin.interop.fhir.ronin.generators.util.generateEffectiveDateTime
import com.projectronin.interop.fhir.ronin.generators.util.generateReference
import com.projectronin.interop.fhir.ronin.generators.util.generateWithDefault
import com.projectronin.interop.fhir.ronin.generators.util.rcdmMeta
import com.projectronin.interop.rcdm.common.enums.RoninProfile
import com.projectronin.interop.rcdm.common.metadata.ValueSetMetadata
import com.projectronin.interop.rcdm.registry.model.ValueSetList
import java.math.BigDecimal

/**
 * Helps generate ronin pulse oximetry observation profile, applies meta and randomly generates an
 * acceptable code from the [possiblePulseOximetryCodes] list, category is generated by base-vital-signs
 */
fun rcdmObservationPulseOximetry(
    tenant: String,
    block: ObservationGenerator.() -> Unit,
): Observation {
    return rcdmBaseObservation(tenant) {
        block.invoke(this)
        meta of rcdmMeta(RoninProfile.OBSERVATION_PULSE_OXIMETRY, tenant) {}
        category of listOf(codeableConcept { coding of vitalSignsCategory })
        code of generateCodeableConcept(code.generate(), possiblePulseOximetryCodes.codes.random())
        subject of generateReference(subject.generate(), subjectReferenceOptions, tenant, "Patient")
        effective of generateEffectiveDateTime(effective.generate(), possibleDateTime)
        value of generateWithDefault(value, valueQuantity)
        component of generateWithDefault(component, pulseOxComponent)
    }
}

fun Patient.rcdmObservationPulseOximetry(block: ObservationGenerator.() -> Unit): Observation {
    val data = this.referenceData()
    return rcdmObservationPulseOximetry(data.tenantId) {
        block.invoke(this)
        subject of
            generateReference(
                subject.generate(),
                subjectReferenceOptions,
                data.tenantId,
                "Patient",
                data.udpId,
            )
    }
}

private val valueQuantity =
    DynamicValue(
        DynamicValueType.QUANTITY,
        Quantity(
            value = Decimal(BigDecimal.valueOf(99)),
            unit = "%O2".asFHIR(),
            system = CodeSystem.UCUM.uri,
            code = Code("%"),
        ),
    )
private val flowRateCoding =
    listOf(
        Coding(system = CodeSystem.LOINC.uri, code = Code("3151-8")),
    )
private val concentrationCoding =
    listOf(
        Coding(system = CodeSystem.LOINC.uri, code = Code("3150-0")),
    )
private val pulseOxComponent =
    listOf(
        ObservationComponent(
            code =
                CodeableConcept(
                    coding = flowRateCoding,
                    text = "Flow Rate".asFHIR(),
                ),
            value =
                DynamicValue(
                    DynamicValueType.QUANTITY,
                    Quantity(
                        value = Decimal(value = BigDecimal.valueOf(110.0)),
                        unit = "L/min".asFHIR(),
                        system = CodeSystem.UCUM.uri,
                        code = Code("L/min"),
                    ),
                ),
        ),
        ObservationComponent(
            code =
                CodeableConcept(
                    coding = concentrationCoding,
                    text = "Concentration".asFHIR(),
                ),
            value =
                DynamicValue(
                    DynamicValueType.QUANTITY,
                    Quantity(
                        value = Decimal(value = BigDecimal.valueOf(70.0)),
                        unit = "%".asFHIR(),
                        system = CodeSystem.UCUM.uri,
                        code = Code("%"),
                    ),
                ),
        ),
    )

val possiblePulseOximetryCodesList =
    listOf(
        Pair(
            "89276-0",
            "Oxygen saturation in Arterial blood by Pulse oximetry --W exercise",
        ),
        Pair(
            "59413-5",
            "Oxygen saturation in Arterial blood by Pulse oximetry --post treatment",
        ),
        Pair(
            "59418-4",
            "Oxygen saturation in Blood Postductal by Pulse oximetry",
        ),
        Pair(
            "59409-3",
            "Oxygen saturation in Arterial blood by Pulse oximetry --during treatment",
        ),
        Pair(
            "59417-6",
            "Oxygen saturation in Arterial blood by Pulse oximetry --resting",
        ),
        Pair(
            "59406-9",
            "Oxygen saturation (8 hour minimum) in Arterial blood Pulse oximetry",
        ),
        Pair(
            "59414-3",
            "Oxygen saturation in Arterial blood by Pulse oximetry --pre bronchodilation",
        ),
        Pair(
            "59410-1",
            "Oxygen saturation in Arterial blood by Pulse oximetry --on room air",
        ),
        Pair(
            "98148-0",
            "Oxygen saturation in 12 hour mean Arterial blood by Pulse oximetry",
        ),
        Pair(
            "89277-8",
            "Oxygen saturation in Arterial blood by Pulse oximetry --during anesthesia",
        ),
        Pair(
            "59407-7",
            "Oxygen saturation in Blood Preductal by Pulse oximetry",
        ),
        Pair(
            "59412-7",
            "Oxygen saturation in Arterial blood by Pulse oximetry --post exercise",
        ),
        Pair(
            "59408-5",
            "Oxygen saturation in Arterial blood by Pulse oximetry",
        ),
        Pair(
            "59416-8",
            "Oxygen saturation in Arterial blood by Pulse oximetry --pre treatment",
        ),
        Pair(
            "59415-0",
            "Oxygen saturation in Arterial blood by Pulse oximetry --pre physiotherapy",
        ),
        Pair(
            "59405-1",
            "Oxygen saturation (8 hour maximum) in Arterial blood Pulse oximetry",
        ),
        Pair("59411-9", "Oxygen saturation in Arterial blood by Pulse oximetry --post bronchodilation"),
    ).map {
        coding {
            system of loinc
            version of "2.74"
            code of it.first
            display of it.second
        }
    }
val possiblePulseOximetryCodes =
    ValueSetList(
        possiblePulseOximetryCodesList,
        ValueSetMetadata(
            registryEntryType = "value_set",
            valueSetName = "inhaledoxygenconcentration",
            valueSetUuid = "74e038f6-d57c-483e-90cb-215af0a5e0ed",
            version = "2",
        ),
    )
