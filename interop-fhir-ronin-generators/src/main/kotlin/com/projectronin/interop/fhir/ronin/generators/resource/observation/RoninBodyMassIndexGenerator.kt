package com.projectronin.interop.fhir.ronin.generators.resource.observation

import com.projectronin.interop.fhir.generators.datatypes.codeableConcept
import com.projectronin.interop.fhir.generators.datatypes.coding
import com.projectronin.interop.fhir.generators.primitives.of
import com.projectronin.interop.fhir.generators.resources.ObservationGenerator
import com.projectronin.interop.fhir.r4.datatype.primitive.Code
import com.projectronin.interop.fhir.r4.resource.Observation
import com.projectronin.interop.fhir.r4.resource.Patient
import com.projectronin.interop.fhir.ronin.generators.resource.referenceData
import com.projectronin.interop.fhir.ronin.generators.util.generateCodeableConcept
import com.projectronin.interop.fhir.ronin.generators.util.generateEffectiveDateTime
import com.projectronin.interop.fhir.ronin.generators.util.generateReference
import com.projectronin.interop.fhir.ronin.generators.util.rcdmMeta
import com.projectronin.interop.rcdm.common.enums.RoninProfile
import com.projectronin.interop.rcdm.common.metadata.ValueSetMetadata
import com.projectronin.interop.rcdm.registry.model.ValueSetList

/**
 * Helps generate ronin body mass index observation profile, applies meta and randomly generates an
 * acceptable code from the [possibleBodyMassIndexCodes] list, category is generated by base-vital-signs
 */
fun rcdmObservationBodyMassIndex(
    tenant: String,
    block: ObservationGenerator.() -> Unit,
): Observation {
    return rcdmBaseObservation(tenant) {
        block.invoke(this)
        meta of rcdmMeta(RoninProfile.OBSERVATION_BODY_MASS_INDEX, tenant) {}
        category of listOf(codeableConcept { coding of vitalSignsCategory })
        code of generateCodeableConcept(code.generate(), possibleBodyMassIndexCodes.codes.random())
        subject of generateReference(subject.generate(), subjectReferenceOptions, tenant, "Patient")
        effective of generateEffectiveDateTime(effective.generate(), possibleDateTime)
    }
}

fun Patient.rcdmObservationBodyMassIndex(block: ObservationGenerator.() -> Unit): Observation {
    val data = this.referenceData()
    return rcdmObservationBodyMassIndex(data.tenantId) {
        block.invoke(this)
        subject of
            generateReference(
                subject.generate(),
                subjectReferenceOptions,
                data.tenantId,
                "Patient",
                data.udpId,
            )
    }
}

val possibleBodyMassIndexCodes =
    ValueSetList(
        listOf(
            coding {
                system of loinc
                version of "2.74"
                code of Code("39156-5")
                display of "Body mass index (BMI) [Ratio]"
            },
        ),
        ValueSetMetadata(
            registryEntryType = "value_set",
            valueSetName = "bodymassindexratiobmi",
            valueSetUuid = "0fd5b59f-a7db-4971-9af9-b597a5ffbfac",
            version = "2",
        ),
    )
