package com.projectronin.interop.fhir.ronin.generators.resource.observation

import com.projectronin.interop.fhir.generators.datatypes.codeableConcept
import com.projectronin.interop.fhir.generators.datatypes.coding
import com.projectronin.interop.fhir.generators.primitives.of
import com.projectronin.interop.fhir.generators.resources.ObservationGenerator
import com.projectronin.interop.fhir.r4.resource.Observation
import com.projectronin.interop.fhir.r4.resource.Patient
import com.projectronin.interop.fhir.ronin.generators.resource.referenceData
import com.projectronin.interop.fhir.ronin.generators.util.generateCodeableConcept
import com.projectronin.interop.fhir.ronin.generators.util.generateEffectiveDateTime
import com.projectronin.interop.fhir.ronin.generators.util.generateReference
import com.projectronin.interop.fhir.ronin.generators.util.rcdmMeta
import com.projectronin.interop.rcdm.common.enums.RoninProfile
import com.projectronin.interop.rcdm.common.metadata.ValueSetMetadata
import com.projectronin.interop.rcdm.registry.model.ValueSetList

/**
 * Helps generate ronin respiratory rate observation profile, applies meta and randomly generates an
 * acceptable code from the [possibleRespiratoryRateCodes] list, category is generated by base-vital-signs
 */
fun rcdmObservationRespiratoryRate(
    tenant: String,
    block: ObservationGenerator.() -> Unit,
): Observation {
    return rcdmBaseObservation(tenant) {
        block.invoke(this)
        meta of rcdmMeta(RoninProfile.OBSERVATION_RESPIRATORY_RATE, tenant) {}
        category of listOf(codeableConcept { coding of vitalSignsCategory })
        code of generateCodeableConcept(code.generate(), possibleRespiratoryRateCodes.codes.random())
        subject of generateReference(subject.generate(), subjectReferenceOptions, tenant, "Patient")
        effective of generateEffectiveDateTime(effective.generate(), possibleDateTime)
    }
}

fun Patient.rcdmObservationRespiratoryRate(block: ObservationGenerator.() -> Unit): Observation {
    val data = this.referenceData()
    return rcdmObservationRespiratoryRate(data.tenantId) {
        block.invoke(this)
        subject of
            generateReference(
                subject.generate(),
                subjectReferenceOptions,
                data.tenantId,
                "Patient",
                data.udpId,
            )
    }
}

val possibleRespiratoryRateCodesList =
    listOf(
        Pair("76270-8", "Respiratory rate by Impedance.transthoracic"),
        Pair("9279-1", "Respiratory rate"),
        Pair("76172-6", "Respiratory rate by Carbon dioxide measurement"),
        Pair("76174-2", "Respiratory rate by Pulse oximetry.plethysmograph"),
        Pair("76170-0", "Respiratory rate by Acoustic measurement"),
        Pair("76173-4", "Respiratory rate by Non-airway pressure measurement"),
        Pair("76171-8", "Respiratory rate by Airway flow measurement"),
    ).map {
        coding {
            system of loinc
            version of "2.74"
            code of it.first
            display of it.second
        }
    }

val possibleRespiratoryRateCodes =
    ValueSetList(
        possibleRespiratoryRateCodesList,
        ValueSetMetadata(
            registryEntryType = "value_set",
            valueSetName = "respiratoryrate",
            valueSetUuid = "46b10973-c8e0-4086-9c71-ec464ef363e8",
            version = "2",
        ),
    )
